
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AssumableMortgageScalarFieldEnum = {
  id: 'id',
  currentBalance: 'currentBalance',
  interestRate: 'interestRate',
  monthlyPayment: 'monthlyPayment',
  remainingTerm: 'remainingTerm',
  qualifyingIncome: 'qualifyingIncome',
  qualifyingDti: 'qualifyingDti',
  assumabilityStatus: 'assumabilityStatus',
  lastVerifiedDate: 'lastVerifiedDate',
  verificationNotes: 'verificationNotes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  downPayment: 'downPayment',
  monthlyAllInPayment: 'monthlyAllInPayment',
  monthlyHoa: 'monthlyHoa',
  monthlyInsurance: 'monthlyInsurance',
  monthlyPmi: 'monthlyPmi',
  monthlyPropertyTax: 'monthlyPropertyTax',
  percentDown: 'percentDown',
  tileMonthlyPayment: 'tileMonthlyPayment',
  assumableDesirabilityScore: 'assumableDesirabilityScore',
  isAssumableDesirable: 'isAssumableDesirable',
  maxDownPaymentThreshold: 'maxDownPaymentThreshold',
  maxLoanBalanceRatioThreshold: 'maxLoanBalanceRatioThreshold',
  rawListingDataId: 'rawListingDataId',
  rawLoanDataId: 'rawLoanDataId'
};

exports.Prisma.DataCorrectionScalarFieldEnum = {
  id: 'id',
  entityType: 'entityType',
  entityId: 'entityId',
  field: 'field',
  originalValue: 'originalValue',
  correctedValue: 'correctedValue',
  reason: 'reason',
  status: 'status',
  appliedAt: 'appliedAt',
  createdBy: 'createdBy',
  createdByAuditSource: 'createdByAuditSource',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  column: 'column',
  fieldPath: 'fieldPath',
  isArrayField: 'isArrayField',
  isJsonField: 'isJsonField',
  rawDataId: 'rawDataId'
};

exports.Prisma.ListingScalarFieldEnum = {
  id: 'id',
  mlsProviderId: 'mlsProviderId',
  parcelNumber: 'parcelNumber',
  zipCode: 'zipCode',
  rawDataHash: 'rawDataHash',
  mlsListingId: 'mlsListingId',
  lastMlsUpdate: 'lastMlsUpdate',
  isAssumable: 'isAssumable',
  processingState: 'processingState',
  deletedAt: 'deletedAt',
  status: 'status',
  price: 'price',
  propertyType: 'propertyType',
  bedrooms: 'bedrooms',
  bathrooms: 'bathrooms',
  squareFeet: 'squareFeet',
  yearBuilt: 'yearBuilt',
  address: 'address',
  city: 'city',
  state: 'state',
  latitude: 'latitude',
  longitude: 'longitude',
  tileX: 'tileX',
  tileY: 'tileY',
  tileZ: 'tileZ',
  amenities: 'amenities',
  interiorFeatures: 'interiorFeatures',
  exteriorFeatures: 'exteriorFeatures',
  parkingDetails: 'parkingDetails',
  associationDetails: 'associationDetails',
  schoolDetails: 'schoolDetails',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  listedAt: 'listedAt',
  lastStatusChange: 'lastStatusChange',
  unitNumber: 'unitNumber',
  mlsInstanceId: 'mlsInstanceId',
  photoUrls: 'photoUrls',
  propertyRadarId: 'propertyRadarId',
  denormalizedAssumableMonthlyPayment: 'denormalizedAssumableMonthlyPayment',
  rawDataId: 'rawDataId',
  tilePrice: 'tilePrice',
  tileDenormalizedAssumableMonthlyPayment: 'tileDenormalizedAssumableMonthlyPayment',
  isRootsListing: 'isRootsListing',
  modifierScore: 'modifierScore',
  propertySubType: 'propertySubType',
  remarks: 'remarks',
  documentUrls: 'documentUrls',
  videoUrls: 'videoUrls',
  staticPriority: 'staticPriority',
  tileId10: 'tileId10',
  tileId11: 'tileId11',
  tileId12: 'tileId12',
  tileId13: 'tileId13',
  tileId14: 'tileId14',
  tileId15: 'tileId15',
  tileId16: 'tileId16',
  tileId17: 'tileId17',
  tileId18: 'tileId18',
  tileId19: 'tileId19',
  tileId20: 'tileId20',
  tileId8: 'tileId8',
  tileId9: 'tileId9',
  tileId6: 'tileId6',
  tileId7: 'tileId7',
  denormalizedAssumableDownPayment: 'denormalizedAssumableDownPayment',
  denormalizedAssumableInterestRate: 'denormalizedAssumableInterestRate',
  denormalizedAssumableLoanType: 'denormalizedAssumableLoanType',
  hasPool: 'hasPool',
  is55Plus: 'is55Plus',
  monthlyHoa: 'monthlyHoa',
  streetAddress: 'streetAddress',
  assumableDesirabilityScore: 'assumableDesirabilityScore',
  isAssumableDesirable: 'isAssumableDesirable',
  processingVersion: 'processingVersion',
  lotSizeAcres: 'lotSizeAcres',
  lotSizeSquareFeet: 'lotSizeSquareFeet',
  agentDetails: 'agentDetails',
  agentEmail: 'agentEmail',
  agentName: 'agentName',
  agentOfficeEmail: 'agentOfficeEmail',
  agentOfficeName: 'agentOfficeName',
  agentOfficePhone: 'agentOfficePhone',
  agentPhone: 'agentPhone',
  coListingAgents: 'coListingAgents',
  denormalizedMlsInstanceLogoUrl: 'denormalizedMlsInstanceLogoUrl',
  denormalizedMlsInstanceName: 'denormalizedMlsInstanceName',
  agentMlsId: 'agentMlsId',
  denormalizedMlsInstanceAcronym: 'denormalizedMlsInstanceAcronym',
  agentOfficeMlsId: 'agentOfficeMlsId',
  hasBasement: 'hasBasement',
  stories: 'stories'
};

exports.Prisma.ListingAuditScalarFieldEnum = {
  id: 'id',
  listingId: 'listingId',
  action: 'action',
  source: 'source',
  sourceId: 'sourceId',
  sourceName: 'sourceName',
  changes: 'changes',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.ListingHistoryScalarFieldEnum = {
  id: 'id',
  listingId: 'listingId',
  price: 'price',
  status: 'status',
  rawData: 'rawData',
  changedFields: 'changedFields',
  effectiveDate: 'effectiveDate',
  createdAt: 'createdAt',
  auditId: 'auditId'
};

exports.Prisma.ListingLocationScalarFieldEnum = {
  id: 'id',
  listingId: 'listingId'
};

exports.Prisma.ListingPhotoScalarFieldEnum = {
  id: 'id',
  listingId: 'listingId',
  mlsUrl: 'mlsUrl',
  s3Url: 's3Url',
  order: 'order',
  lastChecked: 'lastChecked',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ListingReportScalarFieldEnum = {
  id: 'id',
  listingId: 'listingId',
  userId: 'userId',
  reporterType: 'reporterType',
  reason: 'reason',
  details: 'details',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LoanScalarFieldEnum = {
  id: 'id',
  propertyId: 'propertyId',
  loanPosition: 'loanPosition',
  purpose: 'purpose',
  loanType: 'loanType',
  recordingDate: 'recordingDate',
  concurrent: 'concurrent',
  initialAmount: 'initialAmount',
  remainingBalance: 'remainingBalance',
  termYears: 'termYears',
  lenderName: 'lenderName',
  rateType: 'rateType',
  interestRate: 'interestRate',
  currentPeriod: 'currentPeriod',
  startingPeriod: 'startingPeriod',
  totalPayments: 'totalPayments',
  maturityDate: 'maturityDate',
  monthlyPayment: 'monthlyPayment',
  ownerOccupied: 'ownerOccupied',
  assumableMortgageId: 'assumableMortgageId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  mlsInstanceId: 'mlsInstanceId',
  deletedAt: 'deletedAt',
  rawLoanDataId: 'rawLoanDataId',
  interestRateEstimated: 'interestRateEstimated',
  isAssumable: 'isAssumable'
};

exports.Prisma.MlsInstanceDetailsScalarFieldEnum = {
  id: 'id',
  instanceId: 'instanceId',
  acronym: 'acronym',
  name: 'name',
  mlsNumber: 'mlsNumber',
  logoUrl: 'logoUrl',
  region: 'region',
  state: 'state',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MlsInstanceVisibilityScalarFieldEnum = {
  id: 'id',
  mlsInstanceId: 'mlsInstanceId',
  isHidden: 'isHidden',
  reason: 'reason',
  hiddenAt: 'hiddenAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PropertyRadarScalarFieldEnum = {
  id: 'id',
  parcelNumber: 'parcelNumber',
  address: 'address',
  city: 'city',
  state: 'state',
  zipCode: 'zipCode',
  county: 'county',
  propertyType: 'propertyType',
  yearBuilt: 'yearBuilt',
  units: 'units',
  squareFeet: 'squareFeet',
  annualTaxes: 'annualTaxes',
  avm: 'avm',
  availableEquity: 'availableEquity',
  cltv: 'cltv',
  equityPercent: 'equityPercent',
  ownerName1: 'ownerName1',
  ownerName2: 'ownerName2',
  ownerAddress: 'ownerAddress',
  ownerCity: 'ownerCity',
  ownerState: 'ownerState',
  ownerZip: 'ownerZip',
  lastTransferDate: 'lastTransferDate',
  lastTransferValue: 'lastTransferValue',
  lastTransferType: 'lastTransferType',
  lastTransferDownPayment: 'lastTransferDownPayment',
  lastTransferDownPaymentPercent: 'lastTransferDownPaymentPercent',
  deletedAt: 'deletedAt',
  loanDataFetchedAt: 'loanDataFetchedAt',
  denormalizedListingUnitNumber: 'denormalizedListingUnitNumber',
  needsReview: 'needsReview',
  reviewReason: 'reviewReason',
  unitNumber: 'unitNumber',
  listingId: 'listingId',
  rawLoanDataId: 'rawLoanDataId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RawListingDataScalarFieldEnum = {
  id: 'id',
  mlsProviderId: 'mlsProviderId',
  rawData: 'rawData',
  rawDataHash: 'rawDataHash',
  status: 'status',
  errorMessage: 'errorMessage',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  processedAt: 'processedAt',
  parcelNumber: 'parcelNumber',
  zipCode: 'zipCode',
  mlsStatus: 'mlsStatus',
  modificationTimestamp: 'modificationTimestamp',
  mlsInstanceId: 'mlsInstanceId',
  propertyType: 'propertyType',
  statusChangeTimestamp: 'statusChangeTimestamp',
  unitNumber: 'unitNumber',
  unparsedAddress: 'unparsedAddress',
  loanDataError: 'loanDataError',
  loanDataPullStatus: 'loanDataPullStatus',
  photosPullError: 'photosPullError',
  photosPullStatus: 'photosPullStatus',
  rawLoanDataId: 'rawLoanDataId',
  rawPhotoDataId: 'rawPhotoDataId',
  processingVersion: 'processingVersion',
  lastPhotosPullAt: 'lastPhotosPullAt',
  photosCount: 'photosCount',
  photosPullAttempts: 'photosPullAttempts',
  pullerVersion: 'pullerVersion'
};

exports.Prisma.RawLoanDataScalarFieldEnum = {
  id: 'id',
  mlsProviderId: 'mlsProviderId',
  mlsInstanceId: 'mlsInstanceId',
  parcelNumber: 'parcelNumber',
  zipCode: 'zipCode',
  unitNumber: 'unitNumber',
  rawData: 'rawData',
  rawDataHash: 'rawDataHash',
  status: 'status',
  errorMessage: 'errorMessage',
  processedAt: 'processedAt',
  createdAt: 'createdAt',
  apiCriteria: 'apiCriteria',
  rawListingDataId: 'rawListingDataId'
};

exports.Prisma.RawPhotoDataScalarFieldEnum = {
  id: 'id',
  mlsListingId: 'mlsListingId',
  mlsProviderId: 'mlsProviderId',
  rawResponse: 'rawResponse',
  headers: 'headers',
  status: 'status',
  errorMessage: 'errorMessage',
  processedAt: 'processedAt',
  rawListingId: 'rawListingId',
  photoUrls: 'photoUrls',
  createdAt: 'createdAt',
  rawDataHash: 'rawDataHash',
  rawListingDataId: 'rawListingDataId'
};

exports.Prisma.Spatial_ref_sysScalarFieldEnum = {
  srid: 'srid',
  auth_name: 'auth_name',
  auth_srid: 'auth_srid',
  srtext: 'srtext',
  proj4text: 'proj4text'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.EntityType = exports.$Enums.EntityType = {
  RAW_LISTING_DATA: 'RAW_LISTING_DATA',
  RAW_LOAN_DATA: 'RAW_LOAN_DATA',
  RAW_PHOTO_DATA: 'RAW_PHOTO_DATA',
  LISTING_OVERRIDE: 'LISTING_OVERRIDE',
  LISTING_PERMANENT: 'LISTING_PERMANENT',
  LOAN_OVERRIDE: 'LOAN_OVERRIDE',
  LOAN_PERMANENT: 'LOAN_PERMANENT',
  LISTING_PHOTO_OVERRIDE: 'LISTING_PHOTO_OVERRIDE',
  LISTING_PHOTO_PERMANENT: 'LISTING_PHOTO_PERMANENT',
  PROPERTY_RADAR_OVERRIDE: 'PROPERTY_RADAR_OVERRIDE',
  PROPERTY_RADAR_PERMANENT: 'PROPERTY_RADAR_PERMANENT',
  ASSUMABLE_MORTGAGE_OVERRIDE: 'ASSUMABLE_MORTGAGE_OVERRIDE',
  ASSUMABLE_MORTGAGE_PERMANENT: 'ASSUMABLE_MORTGAGE_PERMANENT',
  MLS_INSTANCE_OVERRIDE: 'MLS_INSTANCE_OVERRIDE',
  MLS_INSTANCE_PERMANENT: 'MLS_INSTANCE_PERMANENT',
  LISTING_HISTORY_OVERRIDE: 'LISTING_HISTORY_OVERRIDE',
  LISTING_HISTORY_PERMANENT: 'LISTING_HISTORY_PERMANENT'
};

exports.CorrectionStatus = exports.$Enums.CorrectionStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE'
};

exports.AuditSource = exports.$Enums.AuditSource = {
  ADMIN: 'ADMIN',
  USER: 'USER',
  MLS_SYNC: 'MLS_SYNC',
  SYSTEM_CLEANUP: 'SYSTEM_CLEANUP',
  DATA_MIGRATION: 'DATA_MIGRATION',
  API_WEBHOOK: 'API_WEBHOOK',
  UNKNOWN: 'UNKNOWN'
};

exports.ListingStatus = exports.$Enums.ListingStatus = {
  ACTIVE: 'ACTIVE',
  PENDING: 'PENDING',
  SOLD: 'SOLD',
  WITHDRAWN: 'WITHDRAWN',
  EXPIRED: 'EXPIRED',
  ACTIVE_CONTINGENT: 'ACTIVE_CONTINGENT',
  ACTIVE_KICK_OUT: 'ACTIVE_KICK_OUT',
  ACTIVE_OPTION_CONTRACT: 'ACTIVE_OPTION_CONTRACT',
  ACTIVE_UNDER_CONTRACT: 'ACTIVE_UNDER_CONTRACT',
  ACTIVE_WITH_CONTRACT: 'ACTIVE_WITH_CONTRACT',
  APPROVED: 'APPROVED',
  ARCHIVED: 'ARCHIVED',
  AUCTION: 'AUCTION',
  BACK_ON_MARKET: 'BACK_ON_MARKET',
  CANCELLED: 'CANCELLED',
  CLOSED: 'CLOSED',
  COMING_SOON: 'COMING_SOON',
  CONTINGENT: 'CONTINGENT',
  CONTINGENT_CONTINUE_TO_SHOW: 'CONTINGENT_CONTINUE_TO_SHOW',
  CONTINGENT_NO_SHOW: 'CONTINGENT_NO_SHOW',
  DELETED: 'DELETED',
  HOLD: 'HOLD',
  IN_CONTRACT: 'IN_CONTRACT',
  LEASED: 'LEASED',
  NEW: 'NEW',
  OFF_MARKET: 'OFF_MARKET',
  PENDING_CONTINUE_TO_SHOW: 'PENDING_CONTINUE_TO_SHOW',
  PENDING_NO_SHOW: 'PENDING_NO_SHOW',
  PENDING_TAKING_BACKUPS: 'PENDING_TAKING_BACKUPS',
  PRE_FORECLOSURE: 'PRE_FORECLOSURE',
  PRE_MLS: 'PRE_MLS',
  PRICE_CHANGE: 'PRICE_CHANGE',
  REACTIVATED: 'REACTIVATED',
  RENTED: 'RENTED',
  RESERVED: 'RESERVED',
  SHORT_SALE: 'SHORT_SALE',
  TEMPORARILY_OFF_MARKET: 'TEMPORARILY_OFF_MARKET',
  TERMINATED: 'TERMINATED',
  UNDER_CONTRACT: 'UNDER_CONTRACT',
  UNKNOWN: 'UNKNOWN'
};

exports.PropertyType = exports.$Enums.PropertyType = {
  SINGLE_FAMILY: 'SINGLE_FAMILY',
  CONDO: 'CONDO',
  TOWNHOUSE: 'TOWNHOUSE',
  MULTI_FAMILY: 'MULTI_FAMILY',
  LAND: 'LAND',
  COMMERCIAL: 'COMMERCIAL',
  OTHER: 'OTHER',
  MANUFACTURED: 'MANUFACTURED',
  VACATION: 'VACATION',
  AGRICULTURAL: 'AGRICULTURAL',
  INDUSTRIAL: 'INDUSTRIAL',
  MIXED_USE: 'MIXED_USE',
  RETAIL: 'RETAIL',
  OFFICE: 'OFFICE',
  APARTMENT_BUILDING: 'APARTMENT_BUILDING',
  DEVELOPMENT: 'DEVELOPMENT'
};

exports.LoanType = exports.$Enums.LoanType = {
  FHA: 'FHA',
  VA: 'VA',
  CONVENTIONAL: 'CONVENTIONAL',
  OTHER: 'OTHER',
  PRIVATE: 'PRIVATE',
  CONFORMING: 'CONFORMING',
  NON_CONFORMING_JUMBO: 'NON_CONFORMING_JUMBO'
};

exports.ReporterType = exports.$Enums.ReporterType = {
  CONSUMER: 'CONSUMER',
  REAL_ESTATE_PROFESSIONAL: 'REAL_ESTATE_PROFESSIONAL'
};

exports.ListingReportReason = exports.$Enums.ListingReportReason = {
  NO_LONGER_AVAILABLE: 'NO_LONGER_AVAILABLE',
  INCORRECT_INFORMATION: 'INCORRECT_INFORMATION',
  FRAUDULENT_OR_SPAM: 'FRAUDULENT_OR_SPAM'
};

exports.DataPullStatus = exports.$Enums.DataPullStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  HASH_MATCHED: 'HASH_MATCHED',
  NEW: 'NEW',
  SKIPPED_INACTIVE: 'SKIPPED_INACTIVE',
  INACTIVE: 'INACTIVE',
  NO_RESULTS: 'NO_RESULTS',
  MULTIPLE_RESULTS: 'MULTIPLE_RESULTS',
  EXISTING_DATA_LINKED: 'EXISTING_DATA_LINKED',
  SKIPPED_UNDER_CONSTRUCTION: 'SKIPPED_UNDER_CONSTRUCTION',
  SKIPPED_NOT_VA_OR_FHA: 'SKIPPED_NOT_VA_OR_FHA',
  PENDING_RETRY: 'PENDING_RETRY'
};

exports.PhotoProcessingStatus = exports.$Enums.PhotoProcessingStatus = {
  PENDING: 'PENDING',
  PROCESSED: 'PROCESSED',
  ERROR: 'ERROR',
  SKIPPED: 'SKIPPED',
  CONNECTED: 'CONNECTED'
};

exports.Prisma.ModelName = {
  AssumableMortgage: 'AssumableMortgage',
  DataCorrection: 'DataCorrection',
  Listing: 'Listing',
  ListingAudit: 'ListingAudit',
  ListingHistory: 'ListingHistory',
  ListingLocation: 'ListingLocation',
  ListingPhoto: 'ListingPhoto',
  ListingReport: 'ListingReport',
  Loan: 'Loan',
  MlsInstanceDetails: 'MlsInstanceDetails',
  MlsInstanceVisibility: 'MlsInstanceVisibility',
  PropertyRadar: 'PropertyRadar',
  RawListingData: 'RawListingData',
  RawLoanData: 'RawLoanData',
  RawPhotoData: 'RawPhotoData',
  spatial_ref_sys: 'spatial_ref_sys'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
